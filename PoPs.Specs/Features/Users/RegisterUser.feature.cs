// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PoPs.Specs.Features.Users
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UserShouldBeAbleToFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RegisterUser.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "User should be able to:", "          Register", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "User should be able to:")))
            {
                PoPs.Specs.Features.Users.UserShouldBeAbleToFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register without specify data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "User should be able to:")]
        public virtual void RegisterWithoutSpecifyData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register without specify data", new string[] {
                        "ResetForEachTest"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("navigate to \'/Home\'");
#line 8
 testRunner.And("click in the link \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "value"});
            table1.AddRow(new string[] {
                        "user",
                        ""});
            table1.AddRow(new string[] {
                        "email",
                        ""});
            table1.AddRow(new string[] {
                        "password",
                        ""});
            table1.AddRow(new string[] {
                        "passwordRepeated",
                        ""});
#line 9
    testRunner.And("fill fields with following data", ((string)(null)), table1);
#line 15
 testRunner.When("click in the button \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "Value"});
            table2.AddRow(new string[] {
                        "user",
                        "user is required"});
            table2.AddRow(new string[] {
                        "email",
                        "email is required"});
            table2.AddRow(new string[] {
                        "password",
                        "password is required"});
            table2.AddRow(new string[] {
                        "passwordRepeated",
                        "password is required"});
#line 16
 testRunner.Then("should show the following error messages", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register with different passwords")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "User should be able to:")]
        public virtual void RegisterWithDifferentPasswords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register with different passwords", new string[] {
                        "ResetForEachTest"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
    testRunner.Given("navigate to \'/Home\'");
#line 26
    testRunner.And("click in the link \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "value"});
            table3.AddRow(new string[] {
                        "user",
                        "user"});
            table3.AddRow(new string[] {
                        "email",
                        "user@gmail.com"});
            table3.AddRow(new string[] {
                        "password",
                        "123"});
            table3.AddRow(new string[] {
                        "passwordRepeated",
                        "1234"});
#line 27
    testRunner.And("fill fields with following data", ((string)(null)), table3);
#line 33
    testRunner.When("click in the button \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "Value"});
            table4.AddRow(new string[] {
                        "passwordRepeated",
                        "password fields must be equal"});
#line 34
    testRunner.Then("should show the following error messages", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register with invalid email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "User should be able to:")]
        public virtual void RegisterWithInvalidEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register with invalid email", new string[] {
                        "ResetForEachTest"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
    testRunner.Given("navigate to \'/Home\'");
#line 41
    testRunner.And("click in the link \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "value"});
            table5.AddRow(new string[] {
                        "user",
                        "user"});
            table5.AddRow(new string[] {
                        "email",
                        "user"});
            table5.AddRow(new string[] {
                        "password",
                        "1234"});
            table5.AddRow(new string[] {
                        "passwordRepeated",
                        "1234"});
#line 42
    testRunner.And("fill fields with following data", ((string)(null)), table5);
#line 48
    testRunner.When("click in the button \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "Value"});
            table6.AddRow(new string[] {
                        "email",
                        "email is in a invalid format"});
#line 49
    testRunner.Then("should show the following error messages", ((string)(null)), table6);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register with valid data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "User should be able to:")]
        public virtual void RegisterWithValidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register with valid data", new string[] {
                        "ResetForEachTest"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
    testRunner.Given("navigate to \'/Home\'");
#line 56
    testRunner.And("click in the link \'Register\'");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "value"});
            table7.AddRow(new string[] {
                        "user",
                        "user"});
            table7.AddRow(new string[] {
                        "email",
                        "user@gmail.com"});
            table7.AddRow(new string[] {
                        "password",
                        "1234"});
            table7.AddRow(new string[] {
                        "passwordRepeated",
                        "1234"});
#line 57
    testRunner.And("fill fields with following data", ((string)(null)), table7);
#line 63
    testRunner.When("click in the button \'Register\'");
#line 64
    testRunner.Then("should be redirected to \'User/Success\'");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
